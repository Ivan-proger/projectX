# –ö–æ–º–ø–∏–ª–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª –±–æ—Ç–∞ –∏ –≤—ã–∑—ã–≤–∞—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
import asyncio
import telebot
import json
import re
from telebot.async_telebot import AsyncTeleBot, ExceptionHandler
from django.conf import settings
from django.core.cache import cache, caches

from mainBot.models import –°ategoryChannel

API_TOKEN = settings.BOT_TOKEN
WEBHOOK_URL = f'{settings.WEBHOOK_BASE_URL}/webhook/'  # –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π URL –≤–∞—à–µ–≥–æ –≤–µ–±—Ö—É–∫–∞


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
if settings.DEBUG:
    import logging #–¥–µ–±–∞–≥ —Ä–µ–∂–∏–º
    logger = telebot.logger
    telebot.logger.setLevel(logging.DEBUG)  # Outputs debug messages to console.
    class MyExceptionHandler(ExceptionHandler):
        async def handle(self, exception):
            logger.error(exception)
    bot = AsyncTeleBot(settings.BOT_TOKEN, exception_handler=MyExceptionHandler())
else:
    bot = AsyncTeleBot(settings.BOT_TOKEN)

#! –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–æ–≤
def anketa_text(title, description, count_people, city=None, likes=0, dislikes=0):
    text= f'''
> <b>{title}</b>
{f'\n‚äπ <i>{description}</i> ‚äπ\n' if description else ''}
{f'\nüåÜ {city}' if city else ''}
üë• <b>{count_people}</b>   üíñ <b>{likes}</b>   üëé <b>{dislikes}</b>

(—Å) –ù–ê—à –∫—Ä—É—Ç–æ–π –±–æ—Ç 
        '''      
    return text

#! –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
async def ban_words_cheking(text):

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
    link_pattern = r"(?i)(https?://[^\s<>\"']+|www\d{0,3}\.[^\s<>\"']+|t\.me/[^\s<>\"']+|@[\w\d_]+)"
    if re.search(link_pattern, text):
        return await get_message_text("errors", "ban_link")

    ban_words = await cache.aget("ban_words")
    if not ban_words:
        # –í—ã–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –∑–∞–ø—Ä–µ—Ç–∫–∞–º–∏
        with open("ban_words.json", "r", encoding="utf-8") as file:
            data = json.load(file)
            ban_words = set(data.get("prohibited_words", []))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            await cache.aset("ban_words", ban_words, None)       

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
    found_words = [word for word in ban_words if word.lower() in text.lower()]
    if found_words:
        return await get_message_text("errors", "ban_words_text") + f"{', '.join(found_words)}."
        
    return None  
#! –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∞–Ω–∫–µ—Ç—ã   
async def extract_text(post_text, start_token, end_token):
    start = post_text.find(start_token)
    end = post_text.find(end_token, start)

    if start != -1 and end != -1:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ–∂–¥—É –º–∞—Ä–∫–µ—Ä–∞–º–∏
        return post_text[start + len(start_token):end].strip()
    return None   
async def extract_link(text, start_symbols='t.me/'):
    # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –≤ –∞–Ω–∫–µ—Ç–µ
    for line in text.splitlines():
        if line.startswith(start_symbols):
            return line[len(start_symbols):].split()[0]
    return None

#! FSM
async def get_user_state(user_id): # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    state = await cache.aget(f"user_state:{user_id}")
    if state:
        return state
    return False
async def set_user_state(user_id, state, time=60*25): # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    if state == None:
        cache.delete(f"user_state:{user_id}")
    else:    
        await cache.aset(f"user_state:{user_id}", state, time)

#! –º–µ—Ç–æ–¥ –¥–ª—è messages.json 
async def get_message_text(message_key: str, version: str, language: str='ru') -> str:
    if not settings.DEBUG:
        messages = await caches['redis'].aget('messages')
    else:
        messages=None    
    if not messages:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ JSON-—Ñ–∞–π–ª–∞
        with open('messages.json', 'r', encoding='utf-8') as file:
            messages = json.load(file)
            await caches['redis'].aset('messages', messages, None) # –°—Ç–∞–≤–∏–º –≤ –∫—ç—à –Ω–∞–≤—Å–µ–≥–¥–∞

    return messages.get(language, {}).get(message_key, {}).get(version, "Message not found")    

#! –ö—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def category_cache() -> list:
    category_cache = await caches['redis'].aget(f'category_Channel_cache')
    if not category_cache:   # –ö—ç—à–∏—Ä—É–µ–º –±–∞–∑—É 
        category_cache = [user async for user in –°ategoryChannel.objects.all()]
        await caches['redis'].aset(
            f'category_Channel_cache', 
            category_cache, 
            1 if settings.DEBUG else None
            )
    return category_cache


#! –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞—à register_handlers.py
from .register_handlers import register_handlers
register_handlers(bot)


#! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
async def ensure_webhook():
    webhook_info = await bot.get_webhook_info(5)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –≤–µ–±—Ö—É–∫ –Ω–∞ –Ω—É–∂–Ω—ã–π URL
    if webhook_info.url == WEBHOOK_URL:
        print(f"\n–í–µ–±—Ö—É–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.\n")
    else:
        # –ï—Å–ª–∏ –≤–µ–±—Ö—É–∫ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        print(f"\n -- –¢–µ–∫—É—â–∏–π –≤–µ–±—Ö—É–∫: {webhook_info.url}. –û–∂–∏–¥–∞–µ–º—ã–π: {WEBHOOK_URL}. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        await bot.remove_webhook()
        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        await bot.set_webhook(url=WEBHOOK_URL)
        print(f"‚úÖ –ù–æ–≤—ã–π –≤–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {await bot.get_webhook_info()}\n")
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏
    await bot.close_session()    
