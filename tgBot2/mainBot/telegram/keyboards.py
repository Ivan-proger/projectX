from telebot.types import *
from mainBot.models import –°ategoryComplaint, Channel
from django.core.cache import cache
from django.conf import settings

from mainBot.midleware.text_tools import get_message_text


async def complite_and_close():
    """–ö–æ–Ω–æ–ø–∫–∏ '–ì–æ—Ç–æ–≤–æ' –∏ '–û—Ç–º–µ–Ω–∞' –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    return InlineKeyboardMarkup(row_width=2).row(
        InlineKeyboardButton(await get_message_text('keyboards', 'add_channel_complite'), 
                                    callback_data='message_complite'),                         
        InlineKeyboardButton(await get_message_text("absolute_messages", "stop"), 
                                    callback_data='message_close'),
    )                                

#* –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–æ–ø
async def stop_message():
    return ReplyKeyboardMarkup(True).row(
        InlineKeyboardButton(await get_message_text("absolute_messages", "stop")))

#* –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ 
async def keyboard_add_chennal(user_id: int|str =None, number_img: int = 0) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=2)
    if user_id:
        id_imgs = await cache.aget(f'{user_id}-id_imgs')
        if number_img == 0:
            number_img = await cache.aget(f'{user_id}-id_img_select')
        if id_imgs:
            buttons = []
            for i in range(len(id_imgs)):
                if i != number_img:
                    buttons.append(InlineKeyboardButton(
                            f'{i+1}', callback_data=f'add_imgs:{i}'
                        )
                    )
                else:
                    buttons.append(InlineKeyboardButton(
                            f'üì∑', callback_data=f'trash123'
                        )
                    )                    
            keyboard.row(*buttons)
            # –£–¥–∞–ª–∏—Ç—å –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
            keyboard.add(
                InlineKeyboardButton(
                    await get_message_text('keyboards', 'add_channel_delete_imgs'), 
                    callback_data='add_channel_delete_imgs'
                    )
                )
    
    keyboard.add( 
        # –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
        InlineKeyboardButton(await get_message_text('keyboards', 'add_channel_img_chat'), 
                                   callback_data='add_channel_img_chat'),
        # –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ
        InlineKeyboardButton(await get_message_text('keyboards', 'add_channel_more_img'), 
                                   callback_data='add_channel_more_img'),                                   
        # –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ                           
        InlineKeyboardButton(await get_message_text('keyboards', 'add_channel_description_chat'), 
                                   callback_data='add_channel_description_chat'),
        # –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥                           
        InlineKeyboardButton(await get_message_text('keyboards', 'add_channel_location'), 
                                   callback_data='add_channel_location'),                                   
        # –ì–æ—Ç–æ–≤–æ
        InlineKeyboardButton(await get_message_text('keyboards', 'add_channel_complite'), 
                                   callback_data='add_channel_precomplite'),         
    )  
    return keyboard 

#* –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é InlineKeyboardMarkup
async def keyboard_for_change_channel(user_id: int|str =None, n: int=0) -> InlineKeyboardMarkup:
    """ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ """
    base_keyboard = await keyboard_add_chennal(user_id, n)

    if base_keyboard.keyboard:
        last_row = base_keyboard.keyboard[-1]
        if last_row:
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ
            last_row.pop()
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å—Ç–∞–ª–∞ –ø—É—Å—Ç–æ–π, —É–¥–∞–ª—è–µ–º –µ—ë
            if not last_row:
                base_keyboard.keyboard.pop()

    base_keyboard.add(
        InlineKeyboardButton(await get_message_text('keyboards', 'change_categories'), 
                                   callback_data='callback_change_channel_categories'),                   
    )

    base_keyboard.row(
        # –ì–æ—Ç–æ–≤–æ
        InlineKeyboardButton(await get_message_text('keyboards', 'add_channel_complite'), 
                                   callback_data='change_channel_complete'),           
    )

    return base_keyboard

#* –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–º–∞–π–ª–∏–∫–∞ –∫ –∫–Ω–æ–ø–∫–µ
async def update_keyboard_warning(call: CallbackQuery, callback_data, row_width=1):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    keyboard = call.message.reply_markup
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ –∫ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    updated_keyboard = InlineKeyboardMarkup(row_width=row_width)
    for buttons in keyboard.keyboard:
        for button in buttons:
            if button.callback_data == callback_data:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ "–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ" –∫ —Ç–µ–∫—Å—Ç—É –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
                if str(button.text[0]) != str('‚ö†Ô∏è')[0]:
                    updated_button = InlineKeyboardButton(text=f"‚ö†Ô∏è {button.text}", callback_data=button.callback_data)
                else:
                    updated_button = button    
            else:         
                updated_button = InlineKeyboardButton(text=button.text, callback_data=button.callback_data)
            updated_keyboard.add(updated_button)

    return updated_keyboard

# –ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def generate_paginated_keyboard(items, page, page_size, callback_prefix, selected_ids=[], text_info=None, is_chage=False):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    :param items: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤.
    :param page: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ—Ç 1).
    :param page_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    :param callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å callback –¥–∞–Ω–Ω—ã—Ö.
    :return: InlineKeyboardMarkup.
    """
    start_idx = (page - 1) * page_size
    end_idx = start_idx + page_size
    page_items = items[start_idx:end_idx]
    
    keyboard = InlineKeyboardMarkup()
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫—É
    if text_info:
        keyboard.row(InlineKeyboardButton(
            text_info, 
            callback_data=f"trash123"
            )
        )            

    buttons = []
    for item in page_items:
        button = InlineKeyboardButton(
            text=f"{item.name} {'‚úÖ' if item.id in selected_ids else ''}",  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
            callback_data=f"{callback_prefix}:{item.id}:page:{page}{':change' if is_chage else ''}"  # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        )
        buttons.append(button)
    keyboard.add(*buttons, row_width=2)
    
    button_next = InlineKeyboardButton(
        "‚û°Ô∏è", 
        callback_data=f"{callback_prefix}:page:{page+1}{':change' if is_chage else ''}"
        )
    button_back = InlineKeyboardButton(
        "‚¨ÖÔ∏è", 
        callback_data=f"{callback_prefix}:page:{page-1}{':change' if is_chage else ''}"
        )
    button_no = InlineKeyboardButton(
        "üìõ", 
        callback_data=f"trash123"
        )
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page == 1 and end_idx < len(items):
        pagination_buttons.append(button_no)
        pagination_buttons.append(button_next)
    elif page > 1 and end_idx < len(items):
        pagination_buttons.append(button_back)
        pagination_buttons.append(button_next)
    elif end_idx >= len(items):
        pagination_buttons.append(button_back)
        pagination_buttons.append(button_no)

    if pagination_buttons:
        keyboard.row(*pagination_buttons)

    return keyboard

# –ö–ª–∞–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ª–µ–Ω—Ç—ã
async def keyboard_post(hash: str, hash_id_channel: str, n: int = 0):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Å—Ç–∞ –≤ –ª–µ–Ω—Ç–µ
    """
    async def imgs_button(id_imgs: list, hash: str) -> list:
        buttons = []
        for i in range(len(id_imgs)):
            if i != n:
                buttons.append(InlineKeyboardButton(
                        f'{i+1}', 
                        callback_data=f'imgs:{i}:{hash}:{hash_id_channel}'
                    )
                )
            else:    
                buttons.append(InlineKeyboardButton(
                        f'üì∑', 
                        callback_data=f'trash123'
                    )
                )        
        return buttons
    
    keyboard = InlineKeyboardMarkup(row_width=4)

    id_imgs = await cache.aget(f'{hash}-imgs')

    if id_imgs: # –°–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–Ω–∫–µ—Ç—ã
        keyboard.row( *(await imgs_button(id_imgs, hash)))
    elif id_imgs != False:
        from mainBot.telegram.handlers.rec_feed import decode_base62

        external_id = await decode_base62(hash) 
        posters = (await Channel.objects.aget(external_id=external_id)).poster.split()
        if len(posters) >= 1:
            await cache.aset(f'{hash}', posters, 5*60)
            keyboard.row( *(await imgs_button(posters, hash)))
        else:
            await cache.aset(f'{hash}-imgs', False, 5*60)

    keyboard.add( 
        # –õ–∞–π–∫–∞
        InlineKeyboardButton("üíñ", callback_data=f'like_post:{hash}:{hash_id_channel}'),
        # –ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π                           
        InlineKeyboardButton("üí¨", callback_data=f'comment_post:{hash}:{hash_id_channel}'),
        # –î–∏–∑–ª–∞–π–∫                           
        InlineKeyboardButton("üëé", callback_data=f'dislike_post:{hash}'),                                   
        # –ñ–∞–ª–æ–±–∞
        InlineKeyboardButton("‚ö†Ô∏è", callback_data=f'complaint_post:{hash}:{hash_id_channel}'),         
    ) 

    return keyboard 

# –ö–ª–∞–≤–∞ –∂–∞–ª–æ–±
async def complite_tags_keybord(hash, hash_id_channel):
    """
    –°–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∂–∞–ª–æ–±—ã
    """
    keyboard = await cache.aget('complite_tags_keybord')
    if not keyboard:
        keyboard = InlineKeyboardMarkup()
        async for cp in –°ategoryComplaint.objects.all():
            keyboard.add(InlineKeyboardButton(cp.name, callback_data=f'complite_tags:{cp.id}:{hash}:{hash_id_channel}'))

        keyboard.row(
            InlineKeyboardButton(
                await get_message_text('keyboards', 'add_channel_back'),
                callback_data=f'feed_back:{hash}:{hash_id_channel}'
            ),            
        )
        await cache.aset('complite_tags_keybord', keyboard, 1 if settings.DEBUG else None)
    return keyboard

async def complite_tags_keybord_finish(item_id, hash, hash_id_channel):
    """ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∂–∞–ª–æ–±–æ–π """

    keyboard = InlineKeyboardMarkup()
    item = await cache.aget(f'{item_id}-tags_keybord')
    if not item:
        item = await –°ategoryComplaint.objects.aget(id=int(item_id))
        await cache.aset(f'{item_id}-tags_keybord', item, 1 if settings.DEBUG else None)

    keyboard.row(InlineKeyboardButton(f'{item.name}', callback_data='trash123'))    
    keyboard.row(
        InlineKeyboardButton(
            await get_message_text('keyboards', 'add_channel_back'),
            callback_data=f'feed_back:{hash}:{hash_id_channel}'
        ),            
        InlineKeyboardButton(
            await get_message_text('keyboards', 'add_channel_complite'),
            callback_data=f'tags_complite:{item_id}:{hash}:{hash_id_channel}'
        )

        )        
    return keyboard

async def murkup_keboard_stay() -> ReplyKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
    keyboard = ReplyKeyboardMarkup()
    keyboard.add(
        KeyboardButton(await get_message_text('keyboards', 'callback_feed_start')),
        KeyboardButton(await get_message_text('keyboards', 'menu_change_profile')),
        KeyboardButton(await get_message_text('keyboards', 'menu_referals')),
        KeyboardButton(await get_message_text('keyboards', 'menu_change_location')),
    )

    return keyboard