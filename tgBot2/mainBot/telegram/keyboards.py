from telebot import types
from mainBot.models import –°ategoryComplaint
from django.core.cache import cache
from django.conf import settings
from .bot import get_user_state, set_user_state, get_message_text, anketa_text


async def complite_and_close():
    """–ö–æ–Ω–æ–ø–∫–∏ '–ì–æ—Ç–æ–≤–æ' –∏ '–û—Ç–º–µ–Ω–∞' –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    return types.InlineKeyboardMarkup(row_width=2).row(
        types.InlineKeyboardButton(await get_message_text('keyboards', 'add_channel_complite'), 
                                    callback_data='message_complite'),                         
        types.InlineKeyboardButton(await get_message_text("absolute_messages", "stop"), 
                                    callback_data='message_close'),
    )                                

#* –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–æ–ø
async def stop_message():
    return types.ReplyKeyboardMarkup(row_width=1).row(
        types.InlineKeyboardButton(await get_message_text("absolute_messages", "stop")))

#* –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ 
async def keyboard_add_chennal():
    keyboard = types.InlineKeyboardMarkup(row_width=2).add( 
        # –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
        types.InlineKeyboardButton(await get_message_text('keyboards', 'add_channel_img_chat'), 
                                   callback_data='add_channel_img_chat'),
        # –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ                           
        types.InlineKeyboardButton(await get_message_text('keyboards', 'add_channel_description_chat'), 
                                   callback_data='add_channel_description_chat'),
        # –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥                           
        types.InlineKeyboardButton(await get_message_text('keyboards', 'add_channel_location'), 
                                   callback_data='add_channel_location'),                                   
        # –ì–æ—Ç–æ–≤–æ
        types.InlineKeyboardButton(await get_message_text('keyboards', 'add_channel_complite'), 
                                   callback_data='add_channel_precomplite'),         
    )  
    return keyboard 

#* –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–º–∞–π–ª–∏–∫–∞ –∫ –∫–Ω–æ–ø–∫–µ
async def update_keyboard_warning(call: types.CallbackQuery, callback_data, row_width=1):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    keyboard = call.message.reply_markup
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ –∫ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    updated_keyboard = types.InlineKeyboardMarkup(row_width=row_width)
    for buttons in keyboard.keyboard:
        for button in buttons:
            if button.callback_data == callback_data:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ "–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ" –∫ —Ç–µ–∫—Å—Ç—É –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
                if str(button.text[0]) != str('‚ö†Ô∏è')[0]:
                    updated_button = types.InlineKeyboardButton(text=f"‚ö†Ô∏è {button.text}", callback_data=button.callback_data)
                else:
                    updated_button = button    
            else:         
                updated_button = types.InlineKeyboardButton(text=button.text, callback_data=button.callback_data)
            updated_keyboard.add(updated_button)

    return updated_keyboard

# –ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def generate_paginated_keyboard(items, page, page_size, callback_prefix, selected_ids=[], text_info=None):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    -items: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤.
    -page: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ—Ç 1).
    -page_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    -callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å callback –¥–∞–Ω–Ω—ã—Ö.
    = return: InlineKeyboardMarkup.
    """
    start_idx = (page - 1) * page_size
    end_idx = start_idx + page_size
    page_items = items[start_idx:end_idx]
    
    keyboard = types.InlineKeyboardMarkup()
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫—É
    if text_info:
        keyboard.row(types.InlineKeyboardButton(
            text_info, 
            callback_data=f"trash123"
            )
        )            

    buttons = []
    for item in page_items:
        button = types.InlineKeyboardButton(
            text=f"{item.name} {'‚úÖ' if item.id in selected_ids else ''}",  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
            callback_data=f"{callback_prefix}:{item.id}:page:{page}"  # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        )
        buttons.append(button)
    keyboard.add(*buttons, row_width=2)
    
    button_next = types.InlineKeyboardButton(
        "‚û°Ô∏è", 
        callback_data=f"{callback_prefix}:page:{page+1}"
        )
    button_back = types.InlineKeyboardButton(
        "‚¨ÖÔ∏è", 
        callback_data=f"{callback_prefix}:page:{page-1}"
        )
    button_no = types.InlineKeyboardButton(
        "üìõ", 
        callback_data=f"trash123"
        )
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page == 1 and end_idx < len(items):
        pagination_buttons.append(button_no)
        pagination_buttons.append(button_next)
    elif page > 1 and end_idx < len(items):
        pagination_buttons.append(button_back)
        pagination_buttons.append(button_next)
    elif end_idx >= len(items):
        pagination_buttons.append(button_back)
        pagination_buttons.append(button_no)

    if pagination_buttons:
        keyboard.row(*pagination_buttons)


    return keyboard

# –ö–ª–∞–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ª–µ–Ω—Ç—ã
async def keyboard_post(hash, hash_id_channel):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Å—Ç–∞ –≤ –ª–µ–Ω—Ç–µ
    """
    keyboard = types.InlineKeyboardMarkup(row_width=4).add( 
        # –õ–∞–π–∫–∞
        types.InlineKeyboardButton("üíñ", callback_data=f'like_post+{hash}'),
        # –ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π                           
        types.InlineKeyboardButton("üí¨", callback_data=f'comment_post+{hash}+{hash_id_channel}'),
        # –î–∏–∑–ª–∞–π–∫                           
        types.InlineKeyboardButton("üëé", callback_data=f'dislike_post+{hash}'),                                   
        # –ñ–∞–ª–æ–±–∞
        types.InlineKeyboardButton("‚ö†Ô∏è", callback_data=f'complaint_post+{hash}+{hash_id_channel}'),         
    ) 

    return keyboard 

# –ö–ª–∞–≤–∞ –∂–∞–ª–æ–±
async def complite_tags_keybord(hash, hash_id_channel):
    """
    –°–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∂–∞–ª–æ–±—ã
    """
    keyboard = await cache.aget('complite_tags_keybord')
    if not keyboard:
        keyboard = types.InlineKeyboardMarkup()
        async for cp in –°ategoryComplaint.objects.all():
            keyboard.add(types.InlineKeyboardButton(cp.name, callback_data=f'complite_tags:{cp.id}:{hash}:{hash_id_channel}'))

        keyboard.row(
            types.InlineKeyboardButton(
                await get_message_text('keyboards', 'add_channel_back'),
                callback_data=f'feed_back:{hash}:{hash_id_channel}'
            ),            
        )
        await cache.aset('complite_tags_keybord', keyboard, 1 if settings.DEBUG else None)
    return keyboard

async def complite_tags_keybord_finish(item_id, hash, hash_id_channel):
    """ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∂–∞–ª–æ–±–æ–π """

    keyboard = types.InlineKeyboardMarkup()
    item = await cache.aget(f'{item_id}-tags_keybord')
    if not item:
        item = await –°ategoryComplaint.objects.aget(id=int(item_id))
        await cache.aset(f'{item_id}-tags_keybord', item, 1 if settings.DEBUG else None)

    keyboard.row(types.InlineKeyboardButton(f'{item.name}', callback_data='trash123'))    
    keyboard.row(
        types.InlineKeyboardButton(
            await get_message_text('keyboards', 'add_channel_back'),
            callback_data=f'feed_back:{hash}:{hash_id_channel}'
        ),            
        types.InlineKeyboardButton(
            await get_message_text('keyboards', 'add_channel_complite'),
            callback_data=f'tags_complite:{item_id}:{hash}:{hash_id_channel}'
        )

        )        
    return keyboard