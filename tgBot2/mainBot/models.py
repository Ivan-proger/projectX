from django.db import models
from django.contrib.gis.db import models
from django.utils import timezone
from django.conf import settings
from asgiref.sync import sync_to_async
from datetime import timedelta


# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞
class –°ategoryChannel(models.Model):
    name = models.CharField(max_length=32, verbose_name="–•—ç—à—Ç—ç–≥")

    # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª–∏–∑–∫–∏ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É –∞ –∫–∞–∫–∏–µ –Ω–µ—Ç
    weight = models.PositiveIntegerField(default=0, verbose_name='–í–µ—Å')

    class Meta:
        verbose_name = '–•—ç—à—Ç—ç–≥'
        verbose_name_plural = '–•—ç—à—Ç—ç–≥–∏'

    def __str__(self):
        return f'{self.name}: {self.weight}'

# –Æ–∑–µ—Ä—ãü•∞
class User(models.Model):
    external_id = models.PositiveBigIntegerField(verbose_name='ID')
    name = models.CharField(max_length=32, blank=True, null=True, default="")
    
    region = models.CharField(max_length=32, blank=True, null=True, default="", verbose_name="–ì–æ—Ä–æ–¥")
    # CREATE EXTENSION postgis;
    location = models.PointField(geography=True, blank=True, null=True, verbose_name="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
    categories = models.ManyToManyField(–°ategoryChannel, related_name='users')

    premium = models.BooleanField(default=False, verbose_name='–ü—Ä–µ–º–∏—É–º')
    end_premium = models.DateTimeField(null=True, default=None, verbose_name='–ö–æ–Ω–µ—Ü –ø—Ä–µ–º–∏—É–º–∞')

    ref_people = models.PositiveIntegerField(default=0, verbose_name='–ü—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    ref_code = models.CharField(max_length=20, default='error', verbose_name="–ö–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏")
    invited_by = models.ForeignKey('self', on_delete=models.SET_NULL, null=True, blank=True, related_name='–ü—Ä–∏–≥–ª–∞—Å–∏–ª' )

    is_superuser = models.BooleanField(default=False, verbose_name='–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º')
    is_subscription = models.BooleanField(default=False, verbose_name='–ü–æ–¥–ø–∏—Å–∞–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª—ã-—Å–ø–æ—Å–Ω–æ—Ä—ã')
    last_activity = models.DateTimeField(default=timezone.now, verbose_name='–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')

    is_ban = models.BooleanField(default=False, verbose_name='–ó–∞–±–∞–Ω–µ–Ω')

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    @sync_to_async
    def update_last_activity(self):
        current_date = timezone.now()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ last_activity –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ
        if self.last_activity.year == current_date.year:
            if self.last_activity.month == current_date.month - 1 or (self.last_activity.month == 12 and current_date.month == 1):
                pass # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ –Ω–æ–≤–æ–º –º–µ—Å—è—Ü–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –≤—Ö–æ–¥–æ–º

        self.last_activity = current_date
        self.save()

    class Meta:
        verbose_name = '–Æ–∑–µ—Ä_–±–æ—Ç–∞'
        verbose_name_plural = '–Æ–∑–µ—Ä—ã_–±–æ—Ç–∞'

    def __str__(self):
        if self.name:
            return f'{self.name} ({str(self.external_id)})'
        else:
            return str(self.external_id)

    
# –ö–∞–Ω–∞–ª—ã    
class Channel(models.Model):
    user = models.ManyToManyField(User, related_name='–í–ª–∞–¥–µ–ª—å—Ü—ã')
    name = models.CharField(max_length=32)
    description = models.CharField(blank=True, max_length=256, default='', verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
    poster = models.CharField(max_length=257, blank=True, default='', verbose_name='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    external_id = models.BigIntegerField(verbose_name='ID')
    add_time = models.DateTimeField(default=timezone.now, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')

    region = models.CharField(max_length=32, blank=True, null=True, default="", verbose_name="–ì–æ—Ä–æ–¥")
    # CREATE EXTENSION postgis;
    location = models.PointField(geography=True, blank=True, null=True, verbose_name="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")

    categories = models.ManyToManyField(–°ategoryChannel, related_name='channels')

    folowers = models.PositiveIntegerField(default=0, verbose_name='–§–æ–ª–æ–≤–µ—Ä–æ–≤')
    likes = models.PositiveIntegerField(default=0, verbose_name='–õ–∞–π–∫–∏')
    dislikes = models.PositiveIntegerField(default=0, verbose_name='–î–∏–∑–ª–∞–π–∫–∏')
    is_work = models.BooleanField(default=True, verbose_name='–î–æ—Å—Ç—É–ø–µ–Ω')

    boost = models.PositiveIntegerField(default=0, verbose_name='–£—Ä–æ–≤–µ–Ω—å –±—É—Å—Ç–∞')
    end_boost_time = models.DateTimeField(default=None, blank=True, null=True, verbose_name='–û–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å–µ—Ö –±—É—Å—Ç–æ–≤')

    class Meta:
        verbose_name = '–ö–∞–Ω–∞–ª'
        verbose_name_plural = '–ö–∞–Ω–∞–ª—ã'
    
    def __str__(self):
        if self.name:
            return f'{self.name} ({str(self.external_id)})'
        else:
            return f"'{str(self.external_id)}'"

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∂–∞–ª–æ–±
class –°ategoryComplaint(models.Model):    
    name = models.CharField(max_length=32, verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")

    class Meta:
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∂–∞–ª–æ–±—ã'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∂–∞–ª–æ–±'

    def __str__(self):
        return f'{self.name}'

# –ñ–∞–ª–æ–±—ã
class Complaint(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='–ü–æ–∂–∞–ª–æ–≤–ª—Å—è')
    channel = models.ForeignKey(Channel, on_delete=models.CASCADE, related_name='–ñ–∞–ª–æ–±—ã')
    category = models.ForeignKey(–°ategoryComplaint, on_delete=models.CASCADE, related_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
    text = models.CharField(max_length=512, verbose_name="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
    is_viewed = models.BooleanField(default=False, verbose_name="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ")
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = '–ñ–∞–ª–æ–±–∞'
        verbose_name_plural = '–ñ–∞–ª–æ–±—ã'

    def __str__(self):
        return f'–ñ–∞–ª–æ–±—ã –¥–ª—è {self.channel.name}: {self.text[:20]}'
    


# –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏  –ø–æ–¥ –∫–∞–Ω–∞–ª–∞–º–∏
class Comment(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='–û—Å—Ç–∞–≤–∏–ª')
    channel = models.ForeignKey(Channel, on_delete=models.CASCADE, related_name='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')
    text = models.CharField(max_length=512, verbose_name="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
    is_viewed = models.BooleanField(default=False, verbose_name="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ")
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
        verbose_name_plural = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'

    def __str__(self):
        return f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è {self.channel.name}: {self.text[:20]}'

# –†–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
class SuperChannel(models.Model):
    name = models.CharField(max_length=32)
    external_id = models.IntegerField(verbose_name='ID')
    subscribers_added = models.PositiveIntegerField(verbose_name="–ü—Ä–∏—à–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", default=0)

    class Meta:
        verbose_name = '–†–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–Ω–∞–ª—ã'
        verbose_name_plural = '–†–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã'

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
class ServiceUsage(models.Model):
    date = models.DateField(unique=True)
    count = models.PositiveIntegerField(default=0)
    
    class Meta:
        verbose_name = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
        verbose_name_plural = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'

    def __str__(self):
        return f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {self.date}'
    
