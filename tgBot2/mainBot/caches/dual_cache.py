import datetime
import json

from django.conf import settings
from django.core.cache.backends.base import BaseCache, DEFAULT_TIMEOUT
from django.core.cache import caches
from asgiref.sync import sync_to_async


class DualCacheBackend(BaseCache):
    """
    –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫—ç—à, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –¥–≤–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö backend‚Äô–∞:
    - Redis –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º timeout (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —á–∞—Å).
    - –§–∞–π–ª–æ–≤—ã–π –∫—ç—à –¥–ª—è –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –¥–Ω—è).
    
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ backend‚Äô–∞ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ OPTIONS –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö CACHES.
    """
    def __init__(self, location, params):
        super().__init__(params)
        options = params.get('OPTIONS', {})
        # –ê–ª–∏–∞—Å –¥–ª—è Redis-–∫—ç—à–∞ (–±—ã—Å—Ç—Ä—ã–π)
        self.redis_alias = options.get('REDIS_CACHE_ALIAS', 'redis')
        # –ê–ª–∏–∞—Å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–∞–π–ª–æ–≤—ã–π –∫—ç—à)
        self.local_alias = options.get('LOCAL_CACHE_ALIAS', 'local')
        self.redis_cache = caches[self.redis_alias]
        self.local_cache = caches[self.local_alias]
        # –¢–∞–π–º–∞—É—Ç—ã: –¥–ª—è Redis ‚Äì –∫–æ—Ä–æ—Ç–∫–∏–π, –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ ‚Äì –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π
        self.redis_timeout = options.get('REDIS_TIMEOUT', 3600)  # 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.local_timeout = options.get('LOCAL_TIMEOUT', 3 * 24 * 3600)  # 3 –¥–Ω—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def _log(self, action, key, value=None, extra=""):
        if settings.DEBUG:
            size = len(str(value)) if value is not None else 0
            print(f"[üìù]Cache: {action} - key: {key}, size: {size}. {extra}\n ‚îîvalue = {str(value)[:20]}")

    def get(self, key, default=None, version=None):
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Redis
        value = self.redis_cache.get(key, default=None)
        self._log("get Redis", key, value, "Found in Redis" if value is not None else "Not found in Redis")
        if value is not None:
            return value

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Redis, –∏—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ (—Ñ–∞–π–ª–æ–≤–æ–º)
        value = self.local_cache.get(key, default=None)
        self._log("get Local", key, value, "Found in Local Cache" if value is not None else "Not found in Local Cache")
        if value is not None:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ, —Ä–µ–ø–æ–ø—É–ª–∏—Ä—É–µ–º Redis –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
            self.redis_cache.set(key, value, timeout=self.redis_timeout)
            return value

        return default

    def set(self, key, value, timeout=DEFAULT_TIMEOUT, store_local=True, version=None):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π timeout –¥–ª—è Redis, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω, –∏–Ω–∞—á–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        redis_timeout = timeout if timeout is not DEFAULT_TIMEOUT else self.redis_timeout
        self.redis_cache.set(key, value, timeout=redis_timeout)
        self._log("set Redis", key, value, f"Timeout: {redis_timeout}")
        if store_local:
            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            self.local_cache.set(key, value, timeout=self.local_timeout)
            self._log("set Local", key, value, f"Timeout: {self.local_timeout}")
        return True

    def delete(self, key, version=None):
        self.redis_cache.delete(key)
        self._log("delete Redis", key, extra="Deleted from Redis")
        self.local_cache.delete(key)
        self._log("delete Local", key, extra="Deleted from Local Cache")
        return True
    
    def clear(self):
        self.redis_cache.clear()
        self._log("clear", "all keys", extra="Redis cache cleared")
        self.local_cache.clear()
        self._log("clear", "all keys", extra="Local cache cleared")
        
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏ –º–µ—Ç–æ–¥–æ–≤

    async def aget(self, key, default=None, version=None):
        value = await sync_to_async(self.redis_cache.get)(key, default=None)
        self._log("aget Redis", key, value, "Found in Redis" if value is not None else "Not found in Redis")

        if value is not None:
            #await sync_to_async(self.redis_cache.set)(key, value, timeout=self.redis_timeout)
            return value
        
        value = await sync_to_async(self.local_cache.get)(key, default=None)
        self._log("aget Local", key, value, "Found in Local Cache" if value is not None else "Not found in Local Cache")

        if value is not None:
            await sync_to_async(self.redis_cache.set)(key, value, timeout=self.redis_timeout)
            return value

        return default

    async def aset(self, key, value, timeout=DEFAULT_TIMEOUT, store_local=True, version=None) :
        redis_timeout = timeout if timeout is not DEFAULT_TIMEOUT else self.redis_timeout
        await sync_to_async(self.redis_cache.set)(key, value, timeout=redis_timeout)
        self._log("aset Redis", key, value, f"Timeout: {redis_timeout}")
        if store_local:
            await sync_to_async(self.local_cache.set)(key, value, timeout=self.local_timeout)
            self._log("aset Local", key, value, f"Timeout: {self.local_timeout}")
        return True
