import json
import aio_pika
import asyncio
import os
import threading
from django.dispatch import Signal
from django.conf import settings
from asgiref.sync import async_to_sync



# –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ—Ç–≤–µ—Ç–∞
task_completed = Signal()


class RabbitMQClient:
    def __init__(self):
        self.connection = None
        self.channel = None

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ."""
        if not self.connection or self.connection.is_closed:
            print("\n [üëæ] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ \n")
            self.connection = await aio_pika.connect_robust(
                f"amqp://{os.getenv('RABBITMQ_DEFAULT_USER')}:{os.getenv('RABBITMQ_DEFAULT_PASS')}@rabbitmq/",
            )
            self.channel = await self.connection.channel()
            print(f"[üëæ] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {self.connection} \n")

    async def send_task(self, task_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å."""
        message = json.dumps(task_data)
        await self.channel.default_exchange.publish(
            aio_pika.Message(body=message.encode()),
            routing_key="task_queue"
        )
        print(" [üëæ] –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", task_data)



    async def start_consumer(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏."""
        await self.connect()
        queue = await self.channel.declare_queue('response_queue', durable=True)
        print("[üëæ] –ù–∞—á–∞–ª–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")

        async with queue.iterator() as queue_iter:
            async for message in queue_iter:
                async with message.process():
                    try:
                        print(f"\n [‚úÖ] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.body.decode()}")
                        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–¥–µ—Å—å
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    finally:
                        print("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


    async def continuous_listener(self):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏."""
        await self.connect()
        print("[üëæ] –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—É—â–µ–Ω...")

        while True:
            try:
                await self.start_consumer()
                print(" -- [üëæ] –¶–∏–∫–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –µ–ø—Ç --")
                # –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                await asyncio.sleep(1)
            except Exception as e:
                print(f"[‚ùå] –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫


    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –∫–∞–Ω–∞–ª–æ–≤."""
        if self.channel:
            await self.channel.close()
        if self.connection:
            await self.connection.close()
        print("[üëæ] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ –∑–∞–∫—Ä—ã—Ç–æ")




# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
rabbitmq_client = RabbitMQClient()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
# def start_listener():
#         print("\n [üëæ] –ó–∞–ø—É—Å–∫ \n")
#         loop = asyncio.get_event_loop()
#         rabbitmq_service = RabbitMQClient()
#         print("\n [üëæ] –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—Ç—ã... \n")
#         # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
#         loop.create_task(rabbitmq_service.start_consumer())
#         print("\n [üëæ] –ó–∞–ø—É—â–µ–Ω –ª—É–ø... \n")
#         try:
#             # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π
#             loop.run_forever()
#         except KeyboardInterrupt:
#             print("[üëæ] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
#             loop.run_until_complete(rabbitmq_service.close())
#             loop.stop()

